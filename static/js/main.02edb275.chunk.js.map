{"version":3,"sources":["App.js","index.js"],"names":["App","useState","dishName","dishTime","dishType","dishId","dishOptions","setDishOptions","pizzaSlicesRef","useRef","diameterRef","spicinessRef","sandwichSlicesRef","shouldDisplay","errorCode","displayError","setDisplayError","handleChange","event","target","name","value","Grid","container","direction","justify","alignItems","className","onSubmit","preventDefault","params","preparation_time","type","id","length","diameter","parseFloat","current","slicesPizza","parseInt","alert","no_of_slices","spicinessScale","spiciness_scale","slicesBread","slices_of_bread","axios","post","then","response","counter","error","status","Alert","severity","style","display","item","xs","alt","src","FormControl","TextField","onChange","required","label","defaultValue","inputProps","step","textAlign","InputLabel","Select","labelId","MenuItem","min","ref","Button","variant","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02edb275.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './style.scss';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport {\n  TextField,\n  Select,\n  MenuItem,\n  InputLabel,\n  Grid,\n  FormControl\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\n\nexport default function App() {\n  const [dishOptions, setDishOptions] = useState({\n    dishName: '',\n    dishTime: '00:00:00',\n    dishType: '',\n    dishId: 0\n  });\n  const pizzaSlicesRef = useRef(null);\n  const diameterRef = useRef(null);\n  const spicinessRef = useRef(null);\n  const sandwichSlicesRef = useRef(null);\n  const [displayError, setDisplayError] = useState({\n    shouldDisplay: null,\n    errorCode: null\n  });\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setDishOptions({ ...dishOptions, [name]: value });\n    if (displayError.shouldDisplay != null) {\n      setDisplayError({ shouldDisplay: null });\n    }\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    const urlReq = 'https://frosty-wood-6558.getsandbox.com:443/dishes';\n    const params = {\n      name: dishOptions.dishName,\n      preparation_time: dishOptions.dishTime,\n      type: dishOptions.dishType,\n      id: dishOptions.dishId\n    };\n    if (params.preparation_time.length < 6) {\n      params.preparation_time += ':00';\n    }\n    if (dishOptions.dishType === 'pizza') {\n      let diameter = parseFloat(diameterRef.current.value);\n      let slicesPizza = parseInt(pizzaSlicesRef.current.value, 10);\n      if (diameter && slicesPizza) {\n        params.diameter = diameter;\n        params.no_of_slices = slicesPizza;\n      } else {\n        alert(\n          'Make sure diameter of pizza and number of slices are not empty!'\n        );\n        return false;\n      }\n    } else if (dishOptions.dishType === 'soup') {\n      let spicinessScale = parseInt(spicinessRef.current.value, 10);\n      if (spicinessScale) {\n        params.spiciness_scale = spicinessScale;\n      } else {\n        alert('Make sure spiciness of soup is not empty!');\n        return false;\n      }\n    } else if (dishOptions.dishType === 'sandwich') {\n      let slicesBread = parseInt(sandwichSlicesRef.current.value, 10);\n      if (slicesBread) {\n        params.slices_of_bread = slicesBread;\n      } else {\n        alert('Make sure number of bread slices is not empty!');\n        return false;\n      }\n    }\n    axios.post(urlReq, params).then(\n      response => {\n        let counter = dishOptions.dishId + 1;\n        setDisplayError({ shouldDisplay: false });\n        setDishOptions({ ...dishOptions, dishId: counter });\n      },\n      error => {\n        setDisplayError({\n          shouldDisplay: true,\n          errorCode: error.response.status\n        });\n      }\n    );\n  }\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      className=\"main-grid\"\n    >\n      <form onSubmit={handleSubmit}>\n        <Alert\n          severity=\"error\"\n          style={\n            displayError.shouldDisplay === true\n              ? { display: 'flex' }\n              : { display: 'none' }\n          }\n        >\n          {displayError.errorCode} Try again later or check if all fields are\n          filled correctly!\n        </Alert>\n        <Alert\n          severity=\"success\"\n          style={\n            displayError.shouldDisplay === false\n              ? { display: 'flex' }\n              : { display: 'none' }\n          }\n        >\n          Success! Your dish has been sent!\n        </Alert>\n\n        <Grid item xs={12}>\n          <img\n            alt=\"HexOcean Logo\"\n            className=\"logo\"\n            src=\"https://hexocean.com/static/img/logo.svg\"\n          />\n          <FormControl className=\"full-width-formControl\">\n            <TextField\n              onChange={handleChange}\n              name=\"dishName\"\n              value={dishOptions.dishName}\n              id=\"standard-basic\"\n              required\n              label=\"Name of the dish\"\n            />\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl className=\"full-width-formControl\">\n            <TextField\n              id=\"time\"\n              label=\"Preparation time\"\n              name=\"dishTime\"\n              type=\"time\"\n              required\n              onChange={handleChange}\n              defaultValue=\"\"\n              inputProps={{\n                step: 1\n              }}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} style={{ textAlign: 'left' }}>\n          <FormControl className=\"full-width-formControl\">\n            <InputLabel id=\"dish-type-select-label-label\" required>\n              Type of dish\n            </InputLabel>\n            <Select\n              labelId=\"dish-type-select-label\"\n              id=\"dish-type-select-label\"\n              value={dishOptions.dishType}\n              onChange={handleChange}\n              name=\"dishType\"\n              defaultValue=\"\"\n            >\n              <MenuItem value=\"\">\n                <em>None</em>\n              </MenuItem>\n              <MenuItem value={'pizza'}>Pizza</MenuItem>\n              <MenuItem value={'soup'}>Soup</MenuItem>\n              <MenuItem value={'sandwich'}>Sandwich</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          style={\n            dishOptions.dishType === 'pizza'\n              ? { display: 'block' }\n              : { display: 'none' }\n          }\n        >\n          <FormControl className=\"full-width-formControl\">\n            <TextField\n              id=\"no-of-slices\"\n              label=\"Number of Pizza slices *\"\n              name=\"dishSlices\"\n              type=\"number\"\n              min=\"0\"\n              ref={pizzaSlicesRef}\n              onChange={event =>\n                event.target.value < 0\n                  ? (event.target.value = 0)\n                  : (event.target.value,\n                    (pizzaSlicesRef.current.value = event.target.value))\n              }\n              inputProps={{\n                step: 1\n              }}\n            />\n          </FormControl>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          style={\n            dishOptions.dishType === 'pizza'\n              ? { display: 'block' }\n              : { display: 'none' }\n          }\n        >\n          <FormControl className=\"full-width-formControl\">\n            <TextField\n              id=\"diameter\"\n              label=\"Pizza Diameter *\"\n              name=\"dishDiameter\"\n              type=\"number\"\n              ref={diameterRef}\n              min=\"0.0\"\n              onChange={event =>\n                event.target.value < 0.0\n                  ? (event.target.value = 0.0)\n                  : (event.target.value,\n                    (diameterRef.current.value = event.target.value))\n              }\n              inputProps={{\n                step: 0.1\n              }}\n            />\n          </FormControl>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          style={\n            dishOptions.dishType === 'soup'\n              ? { display: 'block' }\n              : { display: 'none' }\n          }\n        >\n          <FormControl className=\"full-width-formControl\">\n            <TextField\n              id=\"diameter\"\n              label=\"Soup spiciness scale (1-10) *\"\n              name=\"dishSpiciness\"\n              type=\"number\"\n              ref={spicinessRef}\n              min=\"1\"\n              onChange={event =>\n                event.target.value < 1 || event.target.value > 10\n                  ? (event.target.value = 1)\n                  : (event.target.value,\n                    (spicinessRef.current.value = event.target.value))\n              }\n              inputProps={{\n                step: 1\n              }}\n            />\n          </FormControl>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          style={\n            dishOptions.dishType === 'sandwich'\n              ? { display: 'block' }\n              : { display: 'none' }\n          }\n        >\n          <FormControl className=\"full-width-formControl\">\n            <TextField\n              id=\"diameter\"\n              label=\"Slices of bread in sandwich *\"\n              name=\"dishSpiciness\"\n              type=\"number\"\n              ref={sandwichSlicesRef}\n              min=\"1\"\n              onChange={event =>\n                event.target.value < 1\n                  ? (event.target.value = 1)\n                  : (event.target.value,\n                    (sandwichSlicesRef.current.value = event.target.value))\n              }\n              inputProps={{\n                step: 1\n              }}\n            />\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} className=\"button-div\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Send\n          </Button>\n        </Grid>\n      </form>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}